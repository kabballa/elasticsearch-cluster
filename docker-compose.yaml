# ----------------------------------------------------------------------------------#
#                                                                                   #
#   Copyright (C) 2009 - 2025 Coozila! Licensed under the MIT License.              #
#   Coozila! Team    lab@coozila.com                                                #
#                                                                                   #
# ----------------------------------------------------------------------------------#


# ----------------------------------------------------------------------------------#

#   STACK NETWORK    ---------------------------------------------------------------#

networks:

  # --------------------------------------------------------------------------------#

  #   Private network for application services    ----------------------------------#

  stack_private_network:
    #
    #   SSH command to create the Docker network: 
    #   docker network create --driver bridge stack_private_network --subnet=172.16.0.0/16
    #
    #   Setup Network Driver in .env or use default bridge
    #
    driver: bridge
    external: true

  #---------------------------------------------------------------------------------#

  #   Network for Elasticsearch services    ----------------------------------------#

  elastic:
    driver: bridge

# ----------------------------------------------------------------------------------#

#   STACK SERVICES    --------------------------------------------------------------#

services:    

  # --------------------------------------------------------------------------------#

  #   SETUP ELASTICSEARCH CLUSTER    -----------------------------------------------#

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION_ELASTICSEARCH}
    volumes:
      #
      # Volume for storing certificates
      #
      - certs:/usr/share/elasticsearch/config/certs

    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es03\n"\
          "    dns:\n"\
          "      - es03\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '

    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  # --------------------------------------------------------------------------------#

  #   ELASTICSEARCH NODE 01    -----------------------------------------------------#

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION_ELASTICSEARCH}
    volumes:
      #
      #   Volume for storing certificates
      #

      - certs:/usr/share/elasticsearch/config/certs

      #
      #   Volume for Elasticsearch data
      #

      - elasticsearch-data-01:/usr/share/elasticsearch/data

    ports:
      #
      #   Port mapping for Elasticsearch
      #

      - ${LOCAL_LISTEN_ADDR:-127.0.0.1}:${HOST_PORT_ELASTICSEARCH:-9200}:9200

    environment:
      #
      #   Node name for this Elasticsearch instance
      #

      - node.name=es01

      #
      #   Cluster name for Elasticsearch
      #

      - cluster.name=${CLUSTER_NAME_ELASTICSEARCH}

      #
      #   Initial master nodes in the cluster
      #

      - cluster.initial_master_nodes=es01,es02,es03

      #
      #   Seed hosts for discovery
      #

      - discovery.seed_hosts=es02,es03

      #
      #   Elasticsearch password for the elastic user
      #

      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}

      #
      #   Memory lock settings
      #

      - bootstrap.memory_lock=true

      #
      #   Enable X-Pack security features
      #

      - xpack.security.enabled=true

      #
      #   Enable X-Pack security enrollment features
      #

      - xpack.security.enrollment.enabled=true

      #
      #   SSL settings for HTTP layer
      #

      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt

      #
      #   SSL settings for transport layer
      #

      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt

      #
      #   Verification mode for transport layer
      #

      - xpack.security.transport.ssl.verification_mode=certificate

      #
      #   License settings
      #

      - xpack.license.self_generated.type=${LICENSE_ELASTICSEARCH}

      #
      #   Machine learning settings
      #

      - xpack.ml.use_auto_machine_memory_percent=true

    #
    #   Memory limit for the container, with default value
    #

    mem_limit: ${MEMORY_LIMIT_ELASTICSEARCH:-2147483648}

    ulimits:
      #
      #   Memory lock settings for Elasticsearch
      #

      memlock:
        #
        #   Soft memory limit, with default value
        #

        soft: -1

        #
        #   Hard memory limit, with default value
        #

        hard: -1

    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # --------------------------------------------------------------------------------#

  #   ELASTICSEARCH NODE 02    -----------------------------------------------------#

  es02:
    depends_on:
      - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION_ELASTICSEARCH}
    volumes:
      #
      #   Volume for storing certificates
      #

      - certs:/usr/share/elasticsearch/config/certs

      #
      #   Volume for Elasticsearch data
      #

      - elasticsearch-data-02:/usr/share/elasticsearch/data

    environment:
      #
      #   Node name for this Elasticsearch instance
      #

      - node.name=es02

      #
      #   Cluster name for Elasticsearch
      #

      - cluster.name=${CLUSTER_NAME_ELASTICSEARCH}

      #
      #   Initial master nodes in the cluster
      #

      - cluster.initial_master_nodes=es01,es02,es03

      #
      #   Seed hosts for discovery
      #

      - discovery.seed_hosts=es01,es03

      #
      #   Elasticsearch password for the elastic user
      #

      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}

      #
      #   Memory lock settings
      #

      - bootstrap.memory_lock=true

      #
      #   Memory lock settings
      #

      - bootstrap.memory_lock=true

      #
      #   Memory lock settings
      #

      - bootstrap.memory_lock=true

      #
      #   Memory lock settings
      #

      - bootstrap.memory_lock=true

      #
      #   Memory lock settings
      #

      - bootstrap.memory_lock=true

      #
      #   Enable X-Pack security features
      #

      - xpack.security.enabled=true

      #
      #   Enable X-Pack security enrollment features
      #

      - xpack.security.enrollment.enabled=true

      #
      #   SSL settings for HTTP layer
      #

      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt

      #
      #   SSL settings for transport layer
      #

      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt

      #
      #   Verification mode for transport layer
      #

      - xpack.security.transport.ssl.verification_mode=certificate

      #
      #   License settings
      #

      - xpack.license.self_generated.type=${LICENSE_ELASTICSEARCH}

      #
      #   Machine learning settings
      #

      - xpack.ml.use_auto_machine_memory_percent=true

    #
    #   Memory limit for the container, with default value
    #

    mem_limit: ${MEMORY_LIMIT_ELASTICSEARCH:-2147483648}

    ulimits:
      #
      #   Memory lock settings for Elasticsearch
      #

      memlock:
        #
        #   Soft memory limit, with default value
        #

        soft: -1

        #
        #   Hard memory limit, with default value
        #

        hard: -1

    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # --------------------------------------------------------------------------------#

  #   ELASTICSEARCH NODE 03 --------------------------------------------------------#

  es03:
    depends_on:
      - es02
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION_ELASTICSEARCH}
    volumes:
      #
      #   Volume for storing certificates
      #

      - certs:/usr/share/elasticsearch/config/certs

      #
      #   Volume for Elasticsearch data
      #

      - elasticsearch-data-03:/usr/share/elasticsearch/data

    environment:
      #
      #   Node name for this Elasticsearch instance
      #

      - node.name=es03

      #
      #   Cluster name for Elasticsearch
      #

      - cluster.name=${CLUSTER_NAME_ELASTICSEARCH:-elasticsearch-cluster}

      #
      #   Initial master nodes in the cluster
      #

      - cluster.initial_master_nodes=es01,es02,es03

      #
      #   Seed hosts for discovery
      #

      - discovery.seed_hosts=es01,es02

      #
      #   Elasticsearch password for the elastic user
      #

      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}

      #
      #   Memory lock settings
      #

      - bootstrap.memory_lock=true

      #
      #   Memory lock settings
      #

      - bootstrap.memory_lock=true

      #
      #   Enable X-Pack security features
      #

      - xpack.security.enabled=true

      #
      #   Enable X-Pack security enrollment features
      #

      - xpack.security.enrollment.enabled=true

      #
      #   SSL settings for HTTP layer
      #

      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es03/es03.key
      - xpack.security.http.ssl.certificate=certs/es03/es03.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt

      #
      #   SSL settings for transport layer
      #

      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es03/es03.key
      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt

      #
      #   Verification mode for transport layer
      #

      - xpack.security.transport.ssl.verification_mode=certificate

      #
      #   License settings
      #

      - xpack.license.self_generated.type=${LICENSE_ELASTICSEARCH}

      #
      #   Machine learning settings
      #

      - xpack.ml.use_auto_machine_memory_percent=true

    #
    #   Memory limit for the container, with default value
    #

    mem_limit: ${MEMORY_LIMIT_ELASTICSEARCH:-2147483648}

    ulimits:
      #
      #   Memory lock settings for Elasticsearch
      #

      memlock:
        #
        #   Soft memory limit, with default value
        #

        soft: -1

        #
        #   Hard memory limit, with default value
        #

        hard: -1

    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  # --------------------------------------------------------------------------------#

  #   KIBANA    --------------------------------------------------------------------#

  kibana:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION_ELASTICSEARCH}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibana-data:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=${SERVERNAME_KIBANA}
      - ELASTICSEARCH_HOSTS=https://es01:9200
      #- ELASTICSEARCH_HOSTS=["http://es01:9200", "http://es02:9200", "http://es03:9200"]
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt

    #
    #   Memory limit for the container, with default value
    #

    mem_limit: ${MEMORY_LIMIT_ELASTICSEARCH:-2147483648}

    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

# ----------------------------------------------------------------------------------#

#   STACK VOLUMES  -----------------------------------------------------------------#

volumes:

  #   STACK ELASTICSEARCH CERTIFICATES STORAGE
  certs:
    driver: local

  #   STACK ELASTICSEARCH DATA STORAGE
  elasticsearch-data-01:
    driver: local

  #   STACK ELASTICSEARCH DATA 02 STORAGE
  elasticsearch-data-02:
    driver: local

  #   STACK ELASTICSEARCH DATA 03 STORAGE
  elasticsearch-data-03:
    driver: local

  #   STACK KIBANA DATA STORAGE
  kibana-data:
    driver: local

# ----------------------------------------------------------------------------------#
